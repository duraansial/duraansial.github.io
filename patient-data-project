import React, { useState } from 'react';
import { ChevronDown, Code, BarChart, Users, Repeat, PieChart } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

// This is a portfolio website to showcase a data analytics project.
// It includes sections for the project overview, business questions,
// SQL queries, key findings, and a visualization description.
// The design is clean, professional, and fully responsive using Tailwind CSS.

const projectDetails = {
  title: "BC Analytics Skills Portfolio",
  intro: "This project showcases my ability to translate business questions into technical solutions using SQL, Excel, and PowerPoint. The analysis focuses on a simulated patient claims dataset to identify key insights for a pharmaceutical client.",
  sections: [
    {
      id: "q1",
      title: "Question 1: Prescription Volume by Specialty",
      query: `SELECT
    p.provider_specialty,
    p.provider_state,
    COUNT(*) AS prescriptions_count
FROM
    prescriptions AS r
JOIN
    provider AS p
    ON r.provider_id = p.id
WHERE
    r.drug_name = 'DrugX'
GROUP BY
    p.provider_specialty,
    p.provider_state
ORDER BY
    prescriptions_count DESC;`,
      findings: [
        "Oncology is the leading specialty in terms of DrugX prescriptions.",
        "Oncology prescriptions for DrugX are primarily concentrated in CA, TX, and MA.",
        "Other specialties like Cardiology and Internal Medicine also contribute, but at a lower volume."
      ],
      visualizations: [
        "A bar chart showing the total prescription volume for each specialty.",
        "A stacked bar chart to break down the total prescription volume by state within each specialty."
      ],
      image: "https://placehold.co/600x400/E5E7EB/1F2937?text=Q1:+Oncology+Volume+Visualization",
      icon: BarChart
    },
    {
      id: "q2",
      title: "Question 2: Patient Demographics",
      query: `SELECT
    p.patient_age,
    p.patient_gender,
    COUNT(*) AS patient_count
FROM
    patient AS p
JOIN
    prescriptions AS r
    ON p.id = r.patient_id
WHERE
    r.drug_name = 'DrugX'
GROUP BY
    p.patient_age,
    p.patient_gender
ORDER BY
    patient_count DESC;`,
      findings: [
        "The 50-59 age group has the highest prescription volume.",
        "Male patients consistently account for the majority of prescriptions.",
        "Female patients are concentrated in older age groups."
      ],
      visualizations: [
        "A pie chart to visualize the male/female gender split.",
        "A stacked bar chart showing the prescription count by age group, with segments for each gender."
      ],
      image: "https://placehold.co/600x400/E5E7EB/1F2937?text=Q2:+Patient+Demographics+Visualization",
      icon: Users
    },
    {
      id: "q3",
      title: "Question 3: Cross-Prescribing Analysis",
      query: `SELECT
    provider_id,
    patient_id,
    GROUP_CONCAT(DISTINCT drug_name) AS prescribed_drugs
FROM
    prescriptions
WHERE
    drug_name IN ('DrugX', 'DrugY', 'DrugZ')
GROUP BY
    provider_id,
    patient_id
HAVING
    COUNT(DISTINCT drug_name) > 1;`,
      findings: [
        "An instance of cross-prescribing was identified: Provider 101 prescribed both DrugX and DrugY to Patient 1.",
        "This type of analysis helps identify providers treating complex patient cases."
      ],
      visualizations: [
        "A simple data table or a small visual highlighting the specific provider and patient involved.",
        "A network diagram (for larger datasets) to show the connections between patients, providers, and drugs."
      ],
      image: "https://placehold.co/600x400/E5E7EB/1F2937?text=Q3:+Cross-Prescribing+Visualization",
      icon: Repeat
    }
  ]
};

// Main App component
export default function App() {
  const [openSection, setOpenSection] = useState(null);

  const toggleSection = (id) => {
    setOpenSection(openSection === id ? null : id);
  };

  const Section = ({ id, title, query, findings, visualizations, image, icon: Icon }) => (
    <div className="bg-gray-50 border border-gray-200 rounded-xl mb-4 shadow-sm">
      <button
        className="w-full flex items-center justify-between p-6 text-xl font-semibold text-gray-800 focus:outline-none"
        onClick={() => toggleSection(id)}
      >
        <span className="flex items-center space-x-3">
          <Icon className="h-6 w-6 text-orange-500" />
          <span>{title}</span>
        </span>
        <motion.div
          animate={{ rotate: openSection === id ? 180 : 0 }}
          transition={{ duration: 0.3 }}
        >
          <ChevronDown className="h-6 w-6 text-gray-500" />
        </motion.div>
      </button>

      <AnimatePresence>
        {openSection === id && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className="overflow-hidden"
          >
            <div className="p-6 border-t border-gray-200">
              <h3 className="text-lg font-bold text-gray-700 flex items-center space-x-2 mb-3">
                <Code className="h-5 w-5 text-gray-500" />
                <span>SQL Query</span>
              </h3>
              <pre className="bg-gray-100 rounded-lg p-4 text-sm text-gray-800 overflow-x-auto mb-6">
                <code>{query}</code>
              </pre>

              <h3 className="text-lg font-bold text-gray-700 flex items-center space-x-2 mb-3">
                <BarChart className="h-5 w-5 text-gray-500" />
                <span>Key Findings</span>
              </h3>
              <ul className="list-disc list-inside space-y-2 text-gray-700 mb-6">
                {findings.map((finding, index) => (
                  <li key={index}>{finding}</li>
                ))}
              </ul>

              <h3 className="text-lg font-bold text-gray-700 flex items-center space-x-2 mb-3">
                <PieChart className="h-5 w-5 text-gray-500" />
                <span>Visualizations</span>
              </h3>
              <ul className="list-disc list-inside space-y-2 text-gray-700 mb-6">
                {visualizations.map((viz, index) => (
                  <li key={index}>{viz}</li>
                ))}
              </ul>

              <h3 className="text-lg font-bold text-gray-700 flex items-center space-x-2 mb-3">
                <PieChart className="h-5 w-5 text-gray-500" />
                <span>Visualization Image</span>
              </h3>
              {image && (
                <div className="mt-4">
                  <img src={image} alt={title} className="w-full h-auto rounded-lg shadow-lg" />
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-6 sm:p-10 font-sans">
      <div className="max-w-4xl mx-auto">
        <header className="mb-10 text-center">
          <h1 className="text-4xl font-extrabold text-gray-900 mb-3 leading-tight">
            {projectDetails.title}
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            {projectDetails.intro}
          </p>
        </header>

        <section>
          {projectDetails.sections.map((section) => (
            <Section key={section.id} {...section} />
          ))}
        </section>
      </div>
    </div>
  );
}
